##用于建立与kafka集群连接的host/port组。数据将会在所有servers上均衡加载，
##不管哪些server是指定用于bootstrapping。这个列表仅仅影响初始化的hosts（用于发现全部的servers）。
## 这个列表格式：host1:port1,host2:port2,
##…因为这些server仅仅是用于初始化的连接，以发现集群所有成员关系（可能会动态的变化），
## 这个列表不需要包含所有的servers（你可能想要不止一个server，尽管这样，可能某个server宕机了）。
## 如果没有server在这个列表出现，则发送数据会一直失败，直到列表可用。
bootstrap.servers=127.0.0.1:9092
#消息的确认模式
##0：不保证消息的到达确认，只管发送，低延迟但是会出现消息的丢失，在某个server失败的情况下，有点像TCP
##1：发送消息，并会等待leader 收到确认后，一定的可靠性
## -1：发送消息，等待leader收到确认，并进行复制操作后，才返回，最高的可靠性
##acks=all： 这意味着leader需要等待所有备份都成功写入日志，
# 这种策略会保证只要有一个备份存活就不会丢失数据。这是最强的保证。，
acks =all
##key和value的序列化方式，若是没有设置，同serializer.class
key.serializer=org.apache.kafka.common.serialization.StringSerializer
value.serializer=org.apache.kafka.common.serialization.StringSerializer

##producer可以用来缓存数据的内存大小。如果数据产生速度大于向broker发送的速度，producer会阻塞或者抛出异常，
# 以“block.on.buffer.full”来表明。这项设置将和producer能够使用的总内存相关，但并不是一个硬性的限制，
# 因为不是producer使用的所有内存都是用于缓存。一些额外的内存会用于压缩（如果引入压缩机制），同样还有一些用于维护请求。
buffer.memory=33554432
##错误重试次数
retries=0
##压缩类型
#compression.type=none
##批处理数量
#batch.size=16384
#跟踪记录 任意值
#client.id
#关闭连接空闲时间
#connections.max.idle.ms
#延迟发送
#linger.ms=1
#控制block的时长,
#max.block.ms=60000
#请求的最大字节数
#max.request.size
#分区类
#partitioner.class
#请求的响应的最大时间
#request.timeout.ms
#配置选项控制server等待来自followers的确认的最大时间
#timeout.ms
#connection中发送多个请求，叫作一个flight,这样可以减少开销，但是如果产生错误，可能会造成数据的发送顺序改变,默认是5 (修改）
#max.in.flight.requests.per.connection
#metadata.fetch.timeout.ms
#metadata.max.age.ms
#metric.reporters
#metrics.num.samples
#metrics.sample.window.ms
#reconnect.backoff.ms
#retry.backoff.ms